<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Simple Pong Game</title>
  <style>
    body {
      background: #222;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      margin: 0;
      color: #fff;
      font-family: Arial, sans-serif;
    }
    #pongCanvas {
      background: #111;
      display: block;
      border: 2px solid #fff;
    }
    #scoreboard {
      text-align: center;
      font-size: 24px;
      margin-bottom: 10px;
      letter-spacing: 10px;
    }
  </style>
</head>
<body>
  <div>
    <div id="scoreboard">0 : 0</div>
    <canvas id="pongCanvas" width="700" height="400"></canvas>
  </div>
  <script>
    const canvas = document.getElementById('pongCanvas');
    const ctx = canvas.getContext('2d');
    const scoreboard = document.getElementById('scoreboard');

    // Game variables
    const paddleWidth = 12, paddleHeight = 80;
    const ballRadius = 9;
    const fieldWidth = canvas.width, fieldHeight = canvas.height;
    const playerX = 10, computerX = fieldWidth - paddleWidth - 10;
    let playerY = (fieldHeight - paddleHeight) / 2;
    let computerY = (fieldHeight - paddleHeight) / 2;
    let playerScore = 0, computerScore = 0;
    let ball = {
      x: fieldWidth/2,
      y: fieldHeight/2,
      speed: 5,
      dx: 5 * (Math.random() > 0.5 ? 1 : -1),
      dy: 3 * (Math.random() > 0.5 ? 1 : -1)
    };
    let upPressed = false, downPressed = false;

    // Mouse control for player paddle
    canvas.addEventListener('mousemove', function(e) {
      const rect = canvas.getBoundingClientRect();
      let mouseY = e.clientY - rect.top;
      playerY = mouseY - paddleHeight / 2;
      clampPlayerPaddle();
    });

    // Keyboard control for player paddle
    document.addEventListener('keydown', function(e) {
      if (e.key === "ArrowUp") upPressed = true;
      if (e.key === "ArrowDown") downPressed = true;
    });
    document.addEventListener('keyup', function(e) {
      if (e.key === "ArrowUp") upPressed = false;
      if (e.key === "ArrowDown") downPressed = false;
    });

    function clampPlayerPaddle() {
      if (playerY < 0) playerY = 0;
      if (playerY > fieldHeight - paddleHeight) playerY = fieldHeight - paddleHeight;
    }

    function clampComputerPaddle() {
      if (computerY < 0) computerY = 0;
      if (computerY > fieldHeight - paddleHeight) computerY = fieldHeight - paddleHeight;
    }

    function drawRect(x, y, w, h, color) {
      ctx.fillStyle = color;
      ctx.fillRect(x, y, w, h);
    }

    function drawCircle(x, y, r, color) {
      ctx.fillStyle = color;
      ctx.beginPath();
      ctx.arc(x, y, r, 0, Math.PI*2, false);
      ctx.closePath();
      ctx.fill();
    }

    function drawNet() {
      ctx.fillStyle = "#fff";
      for (let i = 0; i < fieldHeight; i += 30) {
        ctx.fillRect(fieldWidth/2 - 1, i, 2, 15);
      }
    }

    function draw() {
      // Clear field
      drawRect(0, 0, fieldWidth, fieldHeight, "#111");

      // Draw net
      drawNet();

      // Draw paddles
      drawRect(playerX, playerY, paddleWidth, paddleHeight, "#0ff");
      drawRect(computerX, computerY, paddleWidth, paddleHeight, "#f00");

      // Draw ball
      drawCircle(ball.x, ball.y, ballRadius, "#fff");
    }

    function resetBall() {
      ball.x = fieldWidth/2;
      ball.y = fieldHeight/2;
      ball.speed = 5;
      // Random direction
      ball.dx = 5 * (Math.random() > 0.5 ? 1 : -1);
      ball.dy = 3 * (Math.random() > 0.5 ? 1 : -1);
    }

    function updateScoreboard() {
      scoreboard.textContent = `${playerScore} : ${computerScore}`;
    }

    function update() {
      // Move player paddle with keyboard
      if (upPressed) {
        playerY -= 6;
        clampPlayerPaddle();
      }
      if (downPressed) {
        playerY += 6;
        clampPlayerPaddle();
      }

      // Move computer paddle
      let compCenter = computerY + paddleHeight/2;
      if (compCenter < ball.y - 18) computerY += 4;
      else if (compCenter > ball.y + 18) computerY -= 4;
      clampComputerPaddle();

      // Move ball
      ball.x += ball.dx;
      ball.y += ball.dy;

      // Top/bottom collision
      if (ball.y - ballRadius < 0 || ball.y + ballRadius > fieldHeight) {
        ball.dy = -ball.dy;
      }

      // Left paddle collision
      if (
        ball.x - ballRadius < playerX + paddleWidth &&
        ball.y > playerY &&
        ball.y < playerY + paddleHeight
      ) {
        ball.x = playerX + paddleWidth + ballRadius; // prevent sticking
        // Calculate new direction depending on where it hits the paddle
        let collidePoint = (ball.y - (playerY + paddleHeight/2)) / (paddleHeight/2);
        let angle = collidePoint * Math.PI/4; // max 45 deg
        let direction = 1;
        ball.dx = direction * ball.speed * Math.cos(angle);
        ball.dy = ball.speed * Math.sin(angle);
        ball.speed += 0.5;
      }

      // Right paddle collision
      if (
        ball.x + ballRadius > computerX &&
        ball.y > computerY &&
        ball.y < computerY + paddleHeight
      ) {
        ball.x = computerX - ballRadius; // prevent sticking
        let collidePoint = (ball.y - (computerY + paddleHeight/2)) / (paddleHeight/2);
        let angle = collidePoint * Math.PI/4;
        let direction = -1;
        ball.dx = direction * ball.speed * Math.cos(angle);
        ball.dy = ball.speed * Math.sin(angle);
        ball.speed += 0.5;
      }

      // Score
      if (ball.x - ballRadius < 0) {
        computerScore++;
        updateScoreboard();
        resetBall();
      } else if (ball.x + ballRadius > fieldWidth) {
        playerScore++;
        updateScoreboard();
        resetBall();
      }
    }

    function gameLoop() {
      update();
      draw();
      requestAnimationFrame(gameLoop);
    }

    // Start game
    updateScoreboard();
    gameLoop();
  </script>
</body>
</html>
